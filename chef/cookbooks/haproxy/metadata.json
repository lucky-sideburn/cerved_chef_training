{"name":"haproxy","version":"2.0.0","description":"Installs and configures haproxy","long_description":"# haproxy Cookbook\n\n[![Build Status](https://travis-ci.org/chef-brigade/haproxy-cookbook.svg?branch=master)](https://travis-ci.org/chef-brigade/haproxy-cookbook) [![Cookbook Version](https://img.shields.io/cookbook/v/haproxy.svg)](https://supermarket.chef.io/cookbooks/haproxy)\n\nInstalls haproxy and prepares the configuration location.\n\n## Requirements\n\n### Platforms\n\n- Ubuntu 12.04+\n- RHEL 6+\n- Debian 8+\n\n## Attributes\n\n- `node['haproxy']['incoming_address']` - sets the address to bind the haproxy process on, 0.0.0.0 (all addresses) by default\n- `node['haproxy']['incoming_port']` - sets the port on which haproxy listens\n- `node['haproxy']['members']` - used by the default recipe to specify the member systems to add. Default\n\n  ```ruby\n  [{\n    \"hostname\" => \"localhost\",\n    \"ipaddress\" => \"127.0.0.1\",\n    \"port\" => 4000,\n    \"ssl_port\" => 4000\n  }, {\n    \"hostname\" => \"localhost\",\n    \"ipaddress\" => \"127.0.0.1\",\n    \"port\" => 4001,\n    \"ssl_port\" => 4001\n  }]\n  ```\n\n- `node['haproxy']['member_port']` - the port that member systems will be listening on if not otherwise specified in the members attribute, default 8080\n- `node['haproxy']['member_weight']` - the weight to apply to member systems if not otherwise specified in the members attribute, default 1\n- `node['haproxy']['app_server_role']` - used by the `app_lb` recipe to search for a specific role of member systems. Default `webserver`.\n- `node['haproxy']['balance_algorithm']` - sets the load balancing algorithm; defaults to roundrobin.\n- `node['haproxy']['enable_ssl']` - whether or not to create listeners for ssl, default false\n- `node['haproxy']['ssl_incoming_address']` - sets the address to bind the haproxy on for SSL, 0.0.0.0 (all addresses) by default\n- `node['haproxy']['ssl_member_port']` - the port that member systems will be listening on for ssl, default 8443\n- `node['haproxy']['ssl_incoming_port']` - sets the port on which haproxy listens for ssl, default 443\n- `node['haproxy']['httpchk']` - used by the `app_lb` recipe. If set, will configure httpchk in haproxy.conf\n- `node['haproxy']['ssl_httpchk']` - used by the `app_lb` recipe. If set and `enable_ssl` is true, will configure httpchk in haproxy.conf for the `ssl_application` section\n- `node['haproxy']['enable_admin']` - whether to enable the admin interface. default true. Listens on port 22002.\n- `node['haproxy']['admin']['address_bind']` - sets the address to bind the administrative interface on, 127.0.0.1 by default\n- `node['haproxy']['admin']['port']` - sets the port for the administrative interface, 22002 by default\n- `node['haproxy']['admin']['options']` - sets extras config parameters on the administrative interface, 'stats uri /' by default\n- `node['haproxy']['enable_stats_socket']` - controls haproxy socket creation, false by default\n- `node['haproxy']['stats_socket_path']` - location of haproxy socket, \"/var/run/haproxy.sock\" by default\n- `node['haproxy']['stats_socket_user']` - user for haproxy socket, default is node['haproxy']['user']\n- `node['haproxy']['stats_socket_group']` - group for haproxy socket, default is node['haproxy']['group']\n- `node['haproxy']['pid_file']` - the PID file of the haproxy process, used in the tuning recipe.\n- `node['haproxy']['global_options']` - global options, like tuning. Format must be of `{ 'option' => 'value' }`; defaults to `{}`.\n- `node['haproxy']['defaults_options']` - an array of options to use for the config file's `defaults` stanza, default is [\"httplog\", \"dontlognull\", \"redispatch\"]\n- `node['haproxy']['defaults_timeouts']['connect']` - connect timeout in defaults stanza\n- `node['haproxy']['defaults_timeouts']['client']` - client timeout in defaults stanza\n- `node['haproxy']['defaults_timeouts']['server']` - server timeout in defaults stanza\n- `node['haproxy']['x_forwarded_for']` - if true, creates an X-Forwarded-For header containing the original client's IP address. This option disables KeepAlive.\n- `node['haproxy']['member_max_connections']` - the maxconn value to be set for each app server\n- `node['haproxy']['cookie']` - if set, use this to pin connection to the same server with a cookie.\n- `node['haproxy']['user']` - user that haproxy runs as\n- `node['haproxy']['group']` - group that haproxy runs as\n- `node['haproxy']['global_max_connections']` - in the `app_lb` config, set the global maxconn\n- `node['haproxy']['member_max_connections']` - the maxconn value to be set for each app server if not otherwise specified in the members attribute\n- `node['haproxy']['frontend_max_connections']` - in the `app_lb` config, set the the maxconn per frontend member\n- `node['haproxy']['frontend_ssl_max_connections']` - in the `app_lb` config, set the maxconn per frontend member using SSL\n- `node['haproxy']['install_method']` - determines which method is used to install haproxy, must be 'source' or 'package'. defaults to 'package'\n- `node['haproxy']['conf_dir']` - the location of the haproxy config file\n- `node['haproxy']['source']['version']` - the version of haproxy to install\n- `node['haproxy']['source']['url']` - the full URL to the haproxy source package\n- `node['haproxy']['source']['checksum']` - the checksum of the haproxy source package\n- `node['haproxy']['source']['prefix']` - the prefix used to `make install` haproxy\n- `node['haproxy']['source']['target_os']` - the target used to `make` haproxy\n- `node['haproxy']['source']['target_cpu']` - the target cpu used to `make` haproxy\n- `node['haproxy']['source']['target_arch']` - the target arch used to `make` haproxy\n- `node['haproxy']['source']['use_pcre']` - whether to build with libpcre support\n- `node['haproxy']['package']['version']` - the version of haproxy to install, default latest\n- `node['haproxy']['pool_members']` - updated by discovery to store node information\n- `node['haproxy']['conf_cookbook']` - used to update which cookbook holds the haproxy.cfg template\n- `node['haproxy']['conf_template_source']` - name of the haproxy.cfg template\n\n## Recipes\n\n### default\n\n### manual\n\nSets up haproxy using statically defined configuration.\n\n### app_lb\n\nUses chef search to set up haproxy creating a dynamically defined configuration. See **Usage** below.\n\n### _discovery\n\nHelper recipe that finds nodes with a attribute defined role name using search. Sets `node['haproxy']['pool_members']`\n\n### tuning\n\nUses the community `cpu` cookbook's `cpu_affinity` LWRP to set affinity for the haproxy process.\n\n### install_package\n\nInstalls haproxy through the package manager. Used by the `default` and `app_lb` recipes.\n\n### install_source\n\nInstalls haproxy from source. Used by the `default` and `app_lb` recipes.\n\n## Providers\n\n### haproxy_lb\n\nConfigure a part of haproxy (`frontend|backend|listen`). It is used in `manual` and `app_lb` recipes to configure default frontends and backends. Several common options can be set as attributes of the LWRP. Others can always be set with the `params` attribute. For instance,\n\n```ruby\nhaproxy_lb 'rabbitmq' do\n  bind '0.0.0.0:5672'\n  mode 'tcp'\n  servers (1..4).map do |i|\n    \"rmq#{i} 10.0.0.#{i}:5672 check inter 10s rise 2 fall 3\"\n  end\n  params({\n    'maxconn' => 20000,\n    'balance' => 'roundrobin'\n  })\nend\n```\n\nwhich will be translated into:\n\n```text\nlisten rabbitmq'\n  bind 0.0.0.0:5672\n  mode tcp\n  rmq1 10.0.0.1:5672 check inter 10s rise 2 fall 3\n  rmq2 10.0.0.2:5672 check inter 10s rise 2 fall 3\n  rmq3 10.0.0.3:5672 check inter 10s rise 2 fall 3\n  rmq4 10.0.0.4:5672 check inter 10s rise 2 fall 3\n  maxconn 20000\n  balance roundrobin\n```\n\nAll options can also be set in the params instead. In that case, you might want to provide an array to params attributes to avoid conflicts for options occuring several times.\n\n```ruby\nhaproxy_lb 'rabbitmq' do\n  params([\n    'bind 0.0.0.0:5672',\n    'mode tcp',\n    'rmq1 10.0.0.1:5672 check inter 10s rise 2 fall 3',\n    'rmq2 10.0.0.2:5672 check inter 10s rise 2 fall 3',\n    'rmq3 10.0.0.3:5672 check inter 10s rise 2 fall 3',\n    'rmq4 10.0.0.4:5672 check inter 10s rise 2 fall 3',\n    'maxconn' => 20000,\n    'balance' => 'roundrobin'\n  ])\nend\n```\n\nwhich will give the same result.\n\nFinally you can also configure frontends and backends by specify the type attribute of the resource. See example in the manual recipe.\n\nInstead of using lwrp, you can use `node['haproxy']['listeners']` to configure all kind of listeners (`listen`, `frontend` and `backend`)\n\n### haproxy_config\n\nThis provider is used to write the actual haproxy.cfg file to the system. Location of haproxy.cfg.erb template file can be adjusted to support wrapper cookbook customizations.\n\n```\nhaproxy_config \"Write Config\" do\n  conf_dir node['haproxy']['conf_dir']\n  conf_cookbook node['haproxy']['conf_cookbook']\n  conf_template_source node['haproxy']['conf_template_source']\nend\n```\n\n### haproxy\n\nThe haproxy LWRP allows for a more freeform method of configuration. It will map a given data structure into the proper configuration format, making it easier for adjustment and expansion.\n\n```ruby\nhaproxy 'myhaproxy' do\n  config Mash.new(\n    :global => {\n      :maxconn => node[:haproxy][:global_max_connections],\n      :user => node[:haproxy][:user],\n      :group => node[:haproxy][:group]\n    },\n    :defaults => {\n      :log => :global,\n      :mode => :tcp,\n      :retries => 3,\n      :timeout => 5\n    },\n    :frontend => {\n      :srvs => {\n        :maxconn => node[:haproxy][:frontend_max_connections],\n        :bind => \"#{node[:haproxy][:incoming_address]}:#{node[:haproxy][:incoming_port]}\",\n        :default_backend => :backend_servers\n      }\n    },\n    :backend => {\n      :backend_servers => {\n        :mode => :tcp,\n        :server => [\n          \"an_node 192.168.99.9:9999\" => {\n            :weight => 1,\n            :maxconn => node[:haproxy][:member_max_connections]\n          }\n        ]\n      }\n    }\n  )\nend\n```\n\n## Usage\n\nUse either the `manual` recipe or the `app_lb` recipe.\n\nWhen using the `manual` recipe, the members attribute specifies the http application servers. If you wish to use the `node['haproxy']['listeners']` attribute or `haproxy_lb` lwrp instead then set `node['haproxy']['enable_default_http']` to `false`.\n\n```ruby\n\"haproxy\" => {\n  \"members\" => [{\n    \"hostname\" => \"appserver1\",\n    \"ipaddress\" => \"123.123.123.1\",\n    \"port\" => 8000,\n    \"ssl_port\" => 8443,\n    \"weight\" => 1,\n    \"max_connections\" => 100\n  }, {\n    \"hostname\" => \"appserver2\",\n    \"ipaddress\" => \"123.123.123.2\",\n    \"port\" => 8000,\n    \"ssl_port\" => 8443,\n    \"weight\" => 1,\n    \"max_connections\" => 100\n  }, {\n    \"hostname\" => \"appserver3\",\n    \"ipaddress\" => \"123.123.123.3\",\n    \"port\" => 8000,\n    \"ssl_port\" => 8443,\n    \"weight\" => 1,\n    \"max_connections\" => 100\n  }]\n}\n```\n\nNote that the following attributes are optional\n\n- `port` will default to the value of `node['haproxy']['member_port']`\n- `ssl_port` will default to the value of `node['haproxy']['ssl_member_port']`\n- `weight` will default to the value of `node['haproxy']['member_weight']`\n- `max_connections` will default to the value of `node['haproxy']['member_max_connections']`\n\nThe `app_lb` recipe is designed to be used with the application cookbook, and provides search mechanism to find the appropriate application servers. Set this in a role that includes the haproxy::app_lb recipe. For example,\n\n```ruby\nname 'load_balancer'\ndescription 'haproxy load balancer'\nrun_list('recipe[haproxy::app_lb]')\noverride_attributes(\n  'haproxy' => {\n    'app_server_role' => 'webserver'\n  }\n)\n```\n\nThe search uses the node's `chef_environment`. For example, create `environments/production.rb`, then upload it to the server with knife\n\n## License & Authors\n\n- Author:: Joshua Timberman ([joshua@chef.io](mailto:joshua@chef.io))\n- Author:: Aaron Baer ([aaron@hw-ops.com](mailto:aaron@hw-ops.com))\n- Author:: Justin Kolberg ([justin@hw-ops.com](mailto:justin@hw-ops.com))\n\n```text\nCopyright:: Heavy Water Operations, LLC.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","maintainer":"Chef Brigade ","maintainer_email":"help@chefbrigade.io","license":"Apache 2.0","platforms":{"debian":">= 0.0.0","ubuntu":">= 0.0.0","centos":">= 0.0.0","redhat":">= 0.0.0","scientific":">= 0.0.0","oracle":">= 0.0.0"},"dependencies":{"cpu":">= 0.2.0","build-essential":">= 0.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{"haproxy":"Installs and configures haproxy","haproxy::app_lb":"Installs and configures haproxy by searching for nodes of a particular role"}}